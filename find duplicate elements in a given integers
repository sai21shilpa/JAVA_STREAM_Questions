import java.util.*;
import java.util.stream.*;

/* This will give the output of all repeated number */
public class DuplicateElements {
  public static void main(String args[]) {
          List<Integer> myList = Arrays.asList(10,15,8,49,25,98,98,32,15);
          Set<Integer> set = new HashSet();
          myList.stream()
                .filter(n -> !set.add(n))
                .forEach(System.out::println);
  }
}

Output:
98, 15 /* Example 98 and 15 are the only repeated values in the list */



/* Way 1 - Gives list of all distinct/unique values */

public static void getDataWithoutDuplicates() {
     List<Integer> myList = Arrays.asList(1, 1, 85, 6, 2, 3, 65, 6, 45, 45, 5662, 2582, 2, 2, 266, 666, 656);
     myList.stream().distinct().forEach(noDuplicateData -> System.out.println(noDuplicateData));
 }

Output : 1 85 6 2 3 65 45 5662 2582 266 666 656



/* Way 2 -  Gives list of all distinct/unique values */ 

public static void getDataWithoutDuplicates() {
      List<Integer> myList = Arrays.asList(1, 1, 85, 6, 2, 3, 65, 6, 45, 45, 5662, 2582, 2, 2, 266, 666, 656);
      Set<Integer> set = new HashSet<>(myList);
        
      // Convert the set back to a list if needed
      List<Integer> uniqueData = set.stream().collect(Collectors.toList());
        
      // Print the unique elements
      uniqueData.forEach(System.out::println);
  }

Output : 1 65 2 3 6 266 45 656 85 2582 666 5662

/* Way 3 - Gives list of all distinct/unique values */

/* When numbers are given as Array int[] arr = {10,15,8,49,25,98,98,32,15}; */

List<Integer> list = Arrays.stream(arr).boxed().distinct()
.collect(Collectors.toList());
